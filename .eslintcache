[{"/Users/guilhermegoncalves/00 - Projects/evaluatz/home-evaluatz/src/App.js":"1","/Users/guilhermegoncalves/00 - Projects/evaluatz/home-evaluatz/src/components/00-General/header.js":"2","/Users/guilhermegoncalves/00 - Projects/evaluatz/home-evaluatz/src/reportWebVitals.js":"3","/Users/guilhermegoncalves/00 - Projects/evaluatz/home-evaluatz/src/index.js":"4","/Users/guilhermegoncalves/00 - Projects/evaluatz/home-evaluatz/src/components/Charts/chartSample.js":"5"},{"size":1936,"mtime":1611595615547,"results":"6","hashOfConfig":"7"},{"size":834,"mtime":1611344195919,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1611339724435,"results":"9","hashOfConfig":"7"},{"size":500,"mtime":1611339724434,"results":"10","hashOfConfig":"7"},{"size":6937,"mtime":1611540440533,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1y696rt",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/guilhermegoncalves/00 - Projects/evaluatz/home-evaluatz/src/App.js",["25"],"/Users/guilhermegoncalves/00 - Projects/evaluatz/home-evaluatz/src/components/00-General/header.js",[],"/Users/guilhermegoncalves/00 - Projects/evaluatz/home-evaluatz/src/reportWebVitals.js",[],["26","27"],"/Users/guilhermegoncalves/00 - Projects/evaluatz/home-evaluatz/src/index.js",[],["28","29"],"/Users/guilhermegoncalves/00 - Projects/evaluatz/home-evaluatz/src/components/Charts/chartSample.js",["30"],"import React from 'react';\n\nimport Chart from 'chart.js';\n// import moment from 'moment';\nimport $ from 'jquery';\n\nclass ChartSample extends React.Component {\n    constructor(props) {\n        super(props);\n        this.evaluatz_chart_stock_sample = null;\n        this.evaluatz_sample_accuracy = 0.1;\n        this.chartColors = {\n            red: 'rgb(255, 99, 132)',\n            orange: 'rgb(255, 159, 64)',\n            yellow: 'rgb(255, 205, 86)',\n            green: 'rgb(75, 192, 192)',\n            blue: 'rgb(54, 162, 235)',\n            purple: 'rgb(153, 102, 255)',\n            grey: 'rgb(201, 203, 207)',\n            greyDark: 'rgb(50,50,50)',\n            white: 'rgb(240,240,240)'\n        };\n    }\n    componentDidMount() {\n        this.loadChart();\n\n    }\n    randomNumber(min, max) {\n        return Math.random() * (max - min) + min;\n    }\n\n    randomArray(length) {\n        var data = [];\n        var i = 0;\n        while (i < length) {\n            data.push(this.randomNumber(5, 10));\n            i++;\n        }\n        return data;\n    }\n\n\n    simutalePrediction(data, accuracy) {\n        var predictionData = [];\n        var i = 0;\n        while (i < data.length) {\n            predictionData.push(this.randomNumber(data[i] * accuracy, data[i] / accuracy));\n            i++;\n        }\n        return predictionData;\n    }\n\n\n    loadChart() {\n        var dateFormat = 'MMMM DD YYYY';\n        // var date = moment('April 01 2017', dateFormat);\n        var length = 30;\n        var labels = Array.apply(null, { length: length }).map(Function.call, Number);;\n        var data = this.randomArray(length);\n        var predictData = this.simutalePrediction(data, this.evaluatz_sample_accuracy);\n        this.drawSampleChart(labels, data, predictData);\n\n        var evl_interval = setInterval(() => {\n            try {\n                this.evaluatz_sample_accuracy += 0.1;\n                if (this.evaluatz_sample_accuracy >= 0.9) {\n                    this.evaluatz_sample_accuracy = 0.99;\n                }\n                predictData = this.simutalePrediction(data, this.evaluatz_sample_accuracy);\n                this.drawSampleChart(labels, data, predictData);\n                $('.evaluatz-stock-percentage').html(parseFloat(this.evaluatz_sample_accuracy * 100).toFixed(2) + \"%\");\n            } catch (error) {\n                // console.log(error);\n            }\n        }, 1000);\n\n        let interval_check = setInterval(() => {\n            if (this.evaluatz_sample_accuracy > 0.9) {\n                clearInterval(evl_interval);\n                clearInterval(interval_check);\n            }\n            $('.evaluatz-stock-loss').html(parseFloat(this.randomNumber(1 - this.evaluatz_sample_accuracy, 1.2 - this.evaluatz_sample_accuracy)).toFixed(2) + \"%\")\n        }, 100);\n    }\n\n    drawSampleChart(labels, data, predictData) {\n        var ctx_tf = document.getElementById('canvasChartSample').getContext('2d');\n        var dataChart = {\n            labels: labels,\n            datasets: [{\n                label: 'Prediction',\n                borderColor: this.chartColors.green,\n                backgroundColor: this.chartColors.green,\n                fill: false,\n                data: predictData,\n                pointRadius: 0,\n                lineTension: 0,\n                borderWidth: 2,\n                yAxisID: 'y-axis-1'\n            },\n            {\n                label: 'Close',\n                borderColor: this.chartColors.blue,\n                backgroundColor: this.chartColors.blue,\n                fill: false,\n                data: data,\n                pointRadius: 0,\n                lineTension: 0,\n                borderWidth: 2,\n                yAxisID: 'y-axis-1',\n            }]\n        };\n        if (this.evaluatz_chart_stock_sample) {\n            this.evaluatz_chart_stock_sample.data = dataChart;\n            this.evaluatz_chart_stock_sample.options.animation = false;\n        }\n        else {\n            this.evaluatz_chart_stock_sample = this.configLineChart_Sample(ctx_tf, dataChart);\n        }\n        this.evaluatz_chart_stock_sample.update();\n    }\n\n    configLineChart_Sample(ctx, lineChartData) {\n        return Chart.Line(ctx, {\n            data: lineChartData,\n            options: {\n                legend: {\n                    labels: {\n                        fontColor: 'white'\n                    }\n                },\n                responsive: true,\n                hoverMode: 'index',\n                stacked: false,\n                title: {\n                    display: true,\n                    text: 'Stock Details',\n                    fontColor: 'white'\n                },\n                scales: {\n                    xAxes: [{\n                        ticks: {\n                            fontColor: 'white'\n                        }\n                    }],\n                    yAxes: [{\n                        type: 'linear',\n                        display: true,\n                        position: 'left',\n                        id: 'y-axis-1',\n                        ticks: {\n                            fontColor: 'white'\n                        }\n                    },\n                    {\n                        type: 'linear',\n                        display: true,\n                        position: 'left',\n                        id: 'y-axis-1',\n                        ticks: {\n                            fontColor: 'white'\n                        }\n                    }]\n                }\n            }\n        });\n    }\n\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row bg-dark\">\n                    <div className=\"col text-white text-center\">\n                        <div className=\"row justify-content-center\">\n                            <h4>Accuracy</h4>\n                        </div>\n                        <div className=\"row justify-content-center\">\n                            <h3 className=\"evaluatz-stock-percentage\">0.00%</h3>\n                        </div>\n                    </div>\n                    <div className=\"col text-white\">\n                        <div className=\"row justify-content-center\">\n                            <h4>Loss</h4>\n                        </div>\n                        <div className=\"row justify-content-center\">\n                            <h3 className=\"evaluatz-stock-loss\">0.00%</h3>\n                        </div>\n                    </div>\n\n                </div>\n                <div className=\"row\"><div className=\"chartjs-size-monitor\"><div className=\"chartjs-size-monitor-expand\"><div className=\"\"></div></div><div className=\"chartjs-size-monitor-shrink\"><div className=\"\"></div></div></div>\n                    <canvas id=\"canvasChartSample\" width=\"2220\" height=\"818\" className=\"chartjs-render-monitor bg-dark\" ></canvas>\n                </div>\n               \n            </div>\n        )\n    }\n}\n\nexport default ChartSample;\n",{"ruleId":"31","severity":1,"message":"32","line":14,"column":11,"nodeType":"33","endLine":14,"endColumn":57},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"34","replacedBy":"38"},{"ruleId":"36","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":55,"column":13,"nodeType":"42","messageId":"43","endLine":55,"endColumn":23},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["44"],"no-negated-in-lhs",["45"],["44"],["45"],"no-unused-vars","'dateFormat' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]